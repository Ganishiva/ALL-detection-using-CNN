import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define paths to your dataset
train_dir = "C:/Users/shiva/OneDrive/Desktop/ALL/newdata/Leukemia5K/Training"
validation_dir = "C:/Users/shiva/OneDrive/Desktop/ALL/newdata/Leukemia5K/Validation"

# Data augmentation and rescaling
train_datagen = ImageDataGenerator(rescale=1./255)
validation_datagen = ImageDataGenerator(rescale=1./255)

# Load and preprocess the training data
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Load and preprocess the validation data
validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Define the CNN model
model =tf.keras.models.Sequential([ tf.keras.layers.Conv2D(16,(3,3),activation ='relu',input_shape=(200,200,3)),
                                tf.keras.layers.MaxPoo12D(2,2),
                                #
                                tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                tf. keras. layers.MaxPoo12D(2,2),
                                #
                                tf.keras.layers.Conv2D(64,(3,3),activation = 'relu'),
                                tf. keras.layers.MaxPool2D(2,2),
                                ##
                                tf. keras. layers.Flatten(),
                                ##
                                tf. keras. layers.Dense(512,activation='relu'),
                                ï¼ƒ#
                                tf. keras. layers.Dense(1,activation='sigmoid')
])
# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model_fit=model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)

# Save the model to a .h5 file
model.save('xxxxx.h5')

# Debugging: Ensure the model is saved correctly
print("Model saved as model.h5")
